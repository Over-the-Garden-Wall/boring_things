function evt_data = read_and_clean_data_for_evt(input_length)

    fn = 'data.h5';
    
    raw_data = read_hdf5_into_struct(fn);
    
    %pad returns conservatively for convenience
    padvals = [abs(min(time_range)) + input_length, max(time_range)];
    raw_data.ret = pad_data_nans(raw_data.ret, padvals(1), padvals(2));
    
%     %have to remove market effects prior to reorganization
%     [raw_data.resid_ret, raw_data.beta] = remove_market_beta(raw_data.ret);
%     
    [evt_r, evt_c] = find(raw_data.evt==0);
    evt_c = evt_c + abs(padvals(1)); %compensate for padding
    
    num_events = length(evt_r);
    num_t = length(time_range);
    
    
    
    evt_data = [];
        
    evt_data.ret = zeros(num_events*num_t, input_length);
    evt_data.label = zeros(num_events*num_t, 1);
    evt_data.t = zeros(num_events*num_t, 1);
    for t = 1:num_t
        for n = 1:num_events
            evt_data.ret((t-1) * num_events + n,:) = ...
                raw_data.ret(evt_r(n), evt_c(n) + time_range(t) + ...
                (-input_length:-1));
            evt_data.label((t-1) * num_events + n) = raw_data.ret(evt_r(n), evt_c(n) + time_range(t));
        end
        evt_data.t((t-1) * num_events + (1:num_events)) = time_range(t);
    end
    evt_data.label = sign(evt_data.label);
    
    evt_data.clf = repmat(raw_data.clf(evt_r,1), num_t, 1); %clf was in a silly format, now vector
    evt_data.mktcap = repmat(mean_nonan(raw_data.mktcap(evt_r,:)')', num_t, 1);
    
    evt_data.ret(isnan(evt_data.ret)) = 0;
    
    to_remove = isnan(evt_data.label) | evt_data.label == 0;
    
    evt_data.ret(to_remove,:) = [];
    evt_data.label(to_remove,:) = [];
    evt_data.t(to_remove) = [];
    evt_data.clf(to_remove) = [];
    evt_data.mktcap(to_remove) = [];
    
    
end
        
    