function [inference_accuracy, fit_accuracy] = test_model_validity(m, samples, labels, proportion4training, num_sims)

    if ~exist('num_sims','var')
        num_sims = 0;
    end

    data(isnan(data)) = 0;

    num_total_samples = size(data,1);
    inference_accuracy = zeros(num_sims,1);
    fit_accuracy = zeros(num_sims,1);
    
    
    for t = 1:num_sims

        rand_list = randperm(num_total_samples);

        training_data = data(rand_list(1:ceil(num_total_samples * proportion4training)),:);
        test_data = data(rand_list(1+ceil(num_total_samples * proportion4training):end),:);

        for_training = rand_list(1:ceil(num_total_samples * proportion4training));
        training_input = samples(),:);
        training_label = sign(labels(rand_list(1:ceil(num_total_samples * proportion4training)),:));

        m = m.fit_fxn(m, training_input, training_label);

        test_input = test_data(:,1:end ~= t_to_predict);
        test_label = sign(test_data(:,1:end == t_to_predict));

        test_input(test_label(:,1) == 0,:) = [];
        test_label(test_label(:,1) == 0,:) = [];


        prediction = m.infer_fxn(training_input, m);
        fit_accuracy(t) = sum(prediction==training_label & prediction~= 0) / ...
            sum(prediction~= 0);


        prediction = m.infer_fxn(test_input, m);
        inference_accuracy(t) = sum(prediction==test_label) / ...
            size(test_label,1); 
    
    end
    
end
    
    