
held_out_ratio = .75;
num_sims = 10;

input_length = 25;

models = [];
% for k = 1:5
%     base_m{k} = default_model('logistic regression');
%     base_m{k}.interaction_distance = k-1;
%     base_m{k}.model_name = ['logreg_t' num2str(k-1)];
% end
% base_m{end+1} = default_model('nearest neighbors');
models{end+1} = default_model('RF');


categories = [];
for t = -20:20
    categories{end+1} = @(x) (x.mktcap < 400 & x.evt == t);
    categories{end+1} = @(x) (x.mktcap > 400 & x.mktcap < 1360 & x.evt == t);
    categories{end+1} = @(x) (x.mktcap < 1360 & x.mktcap < 4700 & x.evt == t);
    categories{end+1} = @(x) (x.mktcap > 4700 & x.evt == t);
end
    

data = read_and_clean_data(input_length);
is_invalid = data.bin_label == 0;
fns = fieldnames(data);
for k = 1:length(fns)
    data.(fns{k})(is_invalid,:) = [];
end


inference_accuracy = zeros(num_sims, length(base_m));
fit_accuracy = zeros(num_sims, length(base_m));
fit_models = cell(num_sims, length(base_m));


for c = 1:length(categoriest)
for m_num = 1:length(models)
        m = model{m_num};

        is_valid = categories{c}(data);
        input_samples = data.input(is_valid,:);
        labels = data.bin_label(is_valid);
    
    
        for m_num = 1:length(base_m)


            tic
            [inference_accuracy(:,m_num), fit_accuracy(:,m_num), fit_models(:,m_num)] ...
                = test_model_validity(m, input_samples, labels, held_out_ratio, num_sims);
            toc

    
end
save(['../data/RF_models_t' num2str(t) '_' num2str(10000*rand) '.mat'], '-v7.3', 'inference_accuracy', 'fit_accuracy', 'fit_models');